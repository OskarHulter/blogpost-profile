import Head from "next/head";
import type { InferGetServerSidePropsType, GetServerSideProps } from 'next'
import type { Comments } from 'src/server/schema'
import { initialComments } from 'src/server/helpers'
import Layout from 'src/components/layout'
import AbTestRunner from 'src/components/ab-test-runner'
// import { SWRConfig } from 'swr'
// import { fetchComments } from 'src/server/handlers'

export const defaultSearchParams = {
  query: 'test',
  page: '1'
}

export type PageProps = {
  comments: Comments;
  fallback: {
    '/api/comments': Comments;
  }
  searchParams?: {
    query?: string
    page?: string
  }
}

export const getServerSideProps = (async () => {
  const comments = initialComments;

  const currentSearchParams = {
    ...defaultSearchParams,
  }

  return {
    props: {
      searchParams: currentSearchParams,
      comments,
      fallback: {
        '/api/comments': initialComments,
      }
    }
  }
}) satisfies GetServerSideProps<PageProps>

// preload('/api/comments', () => fetchComments)
 
export default async function Home(props: InferGetServerSidePropsType<typeof getServerSideProps>) {
  const { fallback, searchParams } = props;
  
    const params = searchParams ? searchParams : defaultSearchParams;
    const query = params?.query ?? '';

    console.log("ðŸš€ ~ file: index.tsx:52 ~ Home ~ query:", query)

    const currentPage = Number(params?.page) || 1;

    console.log("ðŸš€ ~ file: index.tsx:56 ~ Home ~ currentPage:", currentPage)

 
  const totalPages = 20;

  console.log("ðŸš€ ~ file: index.tsx:61 ~ Home ~ totalPages:", totalPages)

  
  if (!comments) return null;

  // <SWRConfig value={{ fallback }}>
  console.dir(fallback)
  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Layout>
          <AbTestRunner />
      </Layout>
    </>
  );
}

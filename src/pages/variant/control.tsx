import Head from "next/head";
import type { InferGetServerSidePropsType, GetServerSideProps } from 'next'
import { initialComments } from 'src/server/helpers'
import Layout from 'src/components/layout'
import AbTestRunner from 'src/components/ab-test-runner'
// import { fetchComments } from 'src/server/handlers'
import { OpenFeature, InMemoryProvider } from "@openfeature/server-sdk";
import { defaultSearchParams, type PageProps } from 'src/pages'


export const getServerSideProps = (async () => {
  const featureFlags = OpenFeature.getClient();

  const FLAG_CONFIGURATION = {
    'with-cows': {
      variants: {
        on: true,
        off: false
      },
      disabled: false,
      defaultVariant: "off",
      contextEvaluator: (context: Record<string, unknown>) => {
        if (context.cow === "Bessie") {
          return "on";
        }
        return "off";
      },
    }
  };
  
   const featureFlagProvider = new InMemoryProvider(FLAG_CONFIGURATION);
  
  OpenFeature.setProvider(featureFlagProvider);
  const context = {
    cow: "x-cow"
  };

  const withCows = await featureFlags.getBooleanValue("with-cows", false, context);

  const comments = initialComments;

  const currentSearchParams = {
    ...defaultSearchParams,
  }

  if (withCows) {
    console.log("ðŸš€ ~ file: index.tsx ~ line 57 ~ withCows", withCows)
  }

  return {
    props: {
      searchParams: currentSearchParams,
      comments,
      fallback: {
        '/api/comments': comments,
      },
    }
  }
}) satisfies GetServerSideProps<PageProps>

// preload('/api/comments', () => fetchComments)
 
export default async function Control(props: InferGetServerSidePropsType<typeof getServerSideProps>) {
  const { comments, fallback, searchParams } = props;
    
    const params = searchParams ? searchParams : defaultSearchParams;
    const query = params?.query ?? '';

    console.log("ðŸš€ ~ file: control.tsx:71 ~ Control ~ query:", query)

    const currentPage = Number(params?.page) || 1;

    console.log("ðŸš€ ~ file: control.tsx:72 ~ Control ~ currentPage:", currentPage)

 
  const totalPages = 20;

  console.log("ðŸš€ ~ file: control.tsx:74 ~ Control ~ totalPages:", totalPages)

  
  if (!comments) return null;

  console.dir(fallback)
  // <SWRConfig value={{ fallback }}>
  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Layout>
          <AbTestRunner />
      </Layout>
    </>
  );
}
